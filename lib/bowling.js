// Generated by CoffeeScript 1.8.0
(function() {
  var Bowling, Frame, Frames, _;

  Frame = (function() {
    function Frame() {
      this.throws = [];
      this.index = 0;
    }

    Frame.prototype.total = function() {
      return this.throws.reduce(function(total, throws) {
        return total + throws;
      });
    };

    Frame.prototype.isSpare = function() {
      var _ref;
      return (_ref = this.total() === 10 && this.throws.length === 2) != null ? _ref : {
        "true": false
      };
    };

    Frame.prototype.isStrike = function() {
      var _ref;
      return (_ref = this.total() === 10 && this.throws.length === 1) != null ? _ref : {
        "true": false
      };
    };

    return Frame;

  })();

  module.exports = Frame;

  _ = require('underscore');

  Frames = (function() {
    function Frames() {
      this.frames = [new Frame];
    }

    Frames.prototype.manageFrames = function(index) {
      if (this.frames.length === 10) {
        return;
      }
      if (_.last(this.frames).throws[0] === 10) {
        this.frames.push(new Frame);
      }
      if (_.last(this.frames).throws.length === 2) {
        this.frames.push(new Frame);
      }
      return _.each(this.frames, function(frame) {
        return frame.index = index += 1;
      });
    };

    Frames.prototype.manageBonuses = function(index) {
      if (index === 0) {
        return;
      }
      if (this.frames[index - 1].isSpare()) {
        this._manageSpares(index);
      }
      if (this.frames[index - 1].isStrike()) {
        this._manageStrikes(index);
      }
      return this.manageBonuses(index -= 1);
    };

    Frames.prototype._manageSpares = function(index) {
      return this.frames[index - 1].throws[2] = this.frames[index].throws[0];
    };

    Frames.prototype._manageStrikes = function(index) {
      this.frames[index - 1].throws[1] = this.frames[index].throws[0];
      if (this.frames[index].isStrike()) {
        return this._manageSpecials(index);
      } else {
        return this.frames[index - 1].throws[2] = this.frames[index].throws[1];
      }
    };

    Frames.prototype._manageSpecials = function(index) {
      var _ref;
      if (this.frames[index + 1] === void 0) {
        return;
      }
      return (_ref = index === 9) != null ? _ref : {
        "return": this.frames[index - 1].throws[2] = this.frames[index + 1].throws[0]
      };
    };

    return Frames;

  })();

  module.exports = Frames;

  _ = require('underscore');

  Bowling = (function() {
    function Bowling() {
      this.game = new Frames();
    }

    Bowling.prototype.add = function(pinsDowned) {
      this.game.manageFrames(-1);
      return _.last(this.game.frames).throws.push(pinsDowned);
    };

    Bowling.prototype.score = function() {
      this.game.manageBonuses(this.game.frames.length - 1);
      return this.game.frames.reduce((function(score, frame) {
        return score + frame.total();
      }), 0);
    };

    return Bowling;

  })();

  module.exports = Bowling;

}).call(this);
